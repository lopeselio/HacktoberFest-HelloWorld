#include<iostream>
#include<queue>
#include<deque>
using namespace std;

    // class
template <typename T>
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};

                // zig - zag tree print

void zigzag(BinaryTreeNode<int> *root) {
   queue<BinaryTreeNode<int> *>q;
    deque<int>dq;
    q.push(root);
    int lvl=0;
    while(q.empty() == 0)
    {
        int l=q.size();        
        while(l--)
        {
            BinaryTreeNode<int> *temp=q.front();
            q.pop();
            
            if(lvl%2==0)
                dq.push_back(temp->data);
            else
                dq.push_front(temp->data);
            
            if(temp->left !=NULL)
            q.push(temp->left);
            
            if(temp->right !=NULL)
            q.push(temp->right);
        }        
        
        lvl++;
        while(dq.empty() ==0)
        {
            cout<<dq.front()<<" ";
            dq.pop_front();
        }
            cout<<"\n";      
    }
    
    }

                    // take - input

BinaryTreeNode<int>* takeInput() {
    int rootData;
    //cout << "Enter root data : ";
    cin >> rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
	q.pop();
        int leftChild, rightChild;
        cin >> leftChild;
        if(leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode -> left =leftNode;
            q.push(leftNode);
        }
        cin >> rightChild;
        if(rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode -> right =rightNode;
            q.push(rightNode);
        }
    }
    return root;
}
                    // main -function
int main() 
{
    BinaryTreeNode<int>* root = takeInput();
    zigzag(root);
}
